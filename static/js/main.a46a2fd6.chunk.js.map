{"version":3,"sources":["Feedback/Statistic/Statistic.js","Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Statistic","good","neutral","bad","total","positiveFeedback","Feedback","handleGoodClick","setState","state","handleNeutralClick","handleBadClick","this","onClick","countTotalFeedback","countPositiveFeedbackPercentage","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAceA,MAZf,YAAqE,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,iBAC9C,OACE,gCACE,+CAAkBJ,KAClB,kDAAqBC,KACrB,8CAAiBC,KACjB,yCAAYC,KACZ,qDAAwBC,EAAxB,YC4DSC,E,kDAhEb,aAAe,IAAD,8BACZ,gBAQFC,gBAAkB,WAChB,EAAKC,SAAS,CACZP,KAAM,EAAKQ,MAAMR,KAAO,KAXd,EAedS,mBAAqB,WACnB,EAAKF,SAAS,CACZN,QAAS,EAAKO,MAAMP,QAAU,KAjBpB,EAqBdS,eAAiB,WACf,EAAKH,SAAS,CACZL,IAAK,EAAKM,MAAMN,IAAM,KArBxB,EAAKM,MAAQ,CACXR,KAAM,EACNC,QAAS,EACTC,IAAK,GALK,E,sDA2Bd,WACE,OAAOS,KAAKH,MAAMR,KAAOW,KAAKH,MAAMP,QAAUU,KAAKH,MAAMN,M,6CAG3D,WACE,OACqB,IAAlBS,KAAKH,MAAMR,MACXW,KAAKH,MAAMR,KAAOW,KAAKH,MAAMP,QAAUU,KAAKH,MAAMN,O,oBAIvD,WACE,OACE,gCACE,uDACA,gCACE,wBAAQU,QAASD,KAAKL,gBAAtB,kBACA,wBAAQM,QAASD,KAAKF,mBAAtB,qBACA,wBAAQG,QAASD,KAAKD,eAAtB,oBAEF,8BACGC,KAAKE,qBACJ,cAAC,EAAD,CACEb,KAAMW,KAAKH,MAAMR,KACjBC,QAASU,KAAKH,MAAMP,QACpBC,IAAKS,KAAKH,MAAMN,IAChBC,MAAOQ,KAAKE,qBACZT,iBAAkBO,KAAKG,oCAGzB,8D,GA1DWC,aCGRC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a46a2fd6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Statistic({ good, neutral, bad, total, positiveFeedback }) {\r\n  return (\r\n    <div>\r\n      <div>Good coment {good}</div>\r\n      <div>Neutral coment {neutral}</div>\r\n      <div>Bad coment {bad}</div>\r\n      <div>Total {total}</div>\r\n      <div>Positive feedback {positiveFeedback} %</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Statistic;\r\n","import { Component } from \"react\";\r\n\r\nimport Statistic from \"./Statistic/Statistic\";\r\n\r\nclass Feedback extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0,\r\n    };\r\n  }\r\n\r\n  handleGoodClick = () => {\r\n    this.setState({\r\n      good: this.state.good + 1,\r\n    });\r\n  };\r\n\r\n  handleNeutralClick = () => {\r\n    this.setState({\r\n      neutral: this.state.neutral + 1,\r\n    });\r\n  };\r\n\r\n  handleBadClick = () => {\r\n    this.setState({\r\n      bad: this.state.bad + 1,\r\n    });\r\n  };\r\n\r\n  countTotalFeedback() {\r\n    return this.state.good + this.state.neutral + this.state.bad;\r\n  }\r\n\r\n  countPositiveFeedbackPercentage() {\r\n    return (\r\n      (this.state.good * 100) /\r\n      (this.state.good + this.state.neutral + this.state.bad)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Please leave feedback</h2>\r\n        <div>\r\n          <button onClick={this.handleGoodClick}>Good</button>\r\n          <button onClick={this.handleNeutralClick}>Neutral</button>\r\n          <button onClick={this.handleBadClick}>Bad</button>\r\n        </div>\r\n        <div>\r\n          {this.countTotalFeedback() ? (\r\n            <Statistic\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={this.countTotalFeedback()}\r\n              positiveFeedback={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          ) : (\r\n            <span>No feedback given</span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Feedback;\r\n","import React from \"react\";\nimport Feedback from \"./Feedback/Feedback\";\n\nfunction App() {\n  return <Feedback />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}